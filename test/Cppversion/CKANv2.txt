#include <cmath>
#include <iostream>
#include <random>
#include "kan_paras.h"
using namespace std;
void silu(fpgaARR &x){
    for(int i=0;i<x.dim3;i++){
        for(int j=0;j<x.dim2;j++){
            for(int k=0;k<x.dim1;k++){
                x.set(i,j,k,x.get(i,j,k)/(1.0+exp(-x.get(i,j,k))));
            }
        }
    }
}
void printarr(const fpgaARR &p){
    printf("dim3: %d, dim2: %d, dim1:%d\n", p.dim3, p.dim2, p.dim1);
    for(int i=0;i<p.dim3;i++){
        for (int j = 0; j < p.dim2; ++j) {
            for (int k = 0; k < p.dim1; ++k) {
                cout << p.get(i,j,k) << " ";
            }
        }
        cout << endl;
    }
}
fpgaARR linear(const fpgaARR &x,const fpgaARR &weight,const fpgaARR &x1,const fpgaARR &weight1){//??��?��?�维
    //float tmp[weight.dim2*x.dim2]={0};
    static float tmp[1024*1024]={0};
    fpgaARR output(tmp,1,x.dim2,weight.dim2);
    for (int i = 0; i < x.dim2; ++i) {
        for (int j = 0; j < weight.dim2; ++j) {
            for (int k = 0; k < x.dim1; ++k) {
                output.arr[i*output.dim1+j]+=x.arr[i*x.dim1+k]*weight.arr[j*weight.dim1+k];
            }
        }
    }
    static float tmp1[1024*1024]={0};
    fpgaARR output1(tmp1,1,x1.dim2,weight1.dim2);
    for (int i = 0; i < x1.dim2; ++i) {
        for (int j = 0; j < weight1.dim2; ++j) {
            for (int k = 0; k < x1.dim1; ++k) {
                output1.arr[i*output1.dim1+j]+=x1.arr[i*x.dim1+k]*weight1.arr[j*weight1.dim1+k];
            }
        }
    }
    for(int i=0;i<output.dim3;i++){
        for(int j=0;j<output.dim2;j++){
            for(int k=0;k<output.dim1;k++){
                output.arr[i*output.dim1+j]+=output1.arr[i*output.dim1+j];
            }
        }
    }
    //cout<<"linear"<<endl;
    //output.shape();
    return output;
}
//fpgaARR addarr(fpgaARR x,fpgaARR y){
//    if(x.dim1==y.dim1&&x.dim2==y.dim2){
//        //float tmp[x.len()]={0};
//        static float tmp[1024*2]={0};
//        fpgaARR output(tmp,1,x.dim2,x.dim1);
//        for (int i = 0; i < x.dim3; ++i) {
//            for (int j = 0; j < x.dim2; ++j) {
//                for (int k = 0; k < x.dim1; ++k) {
//                    output.set(i,j,k,x.get(i,j,k)+y.get(i,j,k));
//                }
//            }
//        }
//        return output;
//    }
//}
fpgaARR b_splines(const fpgaARR &x){
    static float t[grid_size + 2 * spline_order + 1]={0};
    fpgaARR grid(t,1,1,grid_size + 2 * spline_order + 1);
    float h = (grid_range[1] - grid_range[0]) / (float)grid_size;
    for (int i = -spline_order; i <= grid_size + spline_order + 1; ++i) {
        grid.arr[i+spline_order] = i * h + grid_range[0];
    }
    static float tmp[1024*3*11]={0};
    fpgaARR bases(tmp,x.dim2,x.dim1,grid.len()-1);
    for (int i = 0; i < x.dim3; ++i) {
        for (int j = 0; j < x.dim2; ++j) {
            for (int k = 0; k < x.dim1; ++k) {
                float target= x.get(i,j,k);
                for(int l=0;l<grid.len()-1;l++){
                    if(target>=grid.arr[l]&&target<grid.arr[l+1]){
                        bases.set(j,k,l,1);
                    }else{
                        bases.set(j,k,l,0);
                    }
                }
            }
        }
    }
    for(int t=1;t<=spline_order;t++){
        for(int i=0;i<bases.dim3;i++){
            for(int j=0;j<bases.dim2;j++){//data
                float target=x.get(0,i,j);
                for(int k=0;k<bases.dim1;k++){//every knots
                    bases.set(i,j,k,(target-grid.arr[k])/(grid.arr[k+t]-grid.arr[k])*bases.get(i,j,k) + (grid.arr[k+t+1]-target)/(grid.arr[k+t+1]-grid.arr[k+1])*bases.get(i,j,k+1));
                }
            }
        }
        bases.dim1--;
    }
    bases.view();
    return bases;
}

void KanLayer(fpgaARR &x,int layer_now){
    cout<<"layer: "<<layer_now<<endl;
    silu(x);
    layers_spline_weight[layer_now].view();
    fpgaARR B=b_splines(x);
    cout<<"ck1: "<<layer_now<<endl;
    //x.shape();
    //layers_base_weight[layer_now].shape();
    //B.shape();
    //layers_spline_weight[layer_now].shape();
    x=linear(x, layers_base_weight[layer_now],B,layers_spline_weight[layer_now]);
}
void KAN(fpgaARR &x,int hiden_layers_number){
    for(int i=0;i<hiden_layers_number;i++){
        KanLayer(x,i);
    }
    
}
int main(){
    //random_test_data
    float arr1D[2048] = {0};
    random_device rd;                       
    mt19937 gen(rd());                      
    uniform_real_distribution<> dis(-1, 1); 
    for (int i = 0; i < 2048; ++i) {
        arr1D[i] = dis(gen);
    }
    fpgaARR x(arr1D, 1,1024,2);
    
    //test
    //for(int i=0;i<1024;i++){
    //    printf("%f * %f = %f\n",x.arr[i*x.dim1+0],x.arr[i*x.dim1+1],x.arr[i*x.dim1+0]*x.arr[i*x.dim1+1]);        
    //}
    KAN(x,hiden_layers);
    printarr(x);
    return 0;
}